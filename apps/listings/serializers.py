from rest_framework import serializers
from apps.listings.choices.property_types import PROPERTY_TYPES
from apps.listings.models import Listing, Location
from django.contrib.auth.models import Group
from django.db import transaction



# üèôÔ∏è –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ Location
class LocationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Location
        fields = ['city', 'street', 'house_number', 'country', 'postal_code']  # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã


# üìã –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ Listing
class ListingSerializer(serializers.ModelSerializer):
    # –í–ª–æ–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å Location (OneToOne / ForeignKey)
    location = LocationSerializer()
    property_type = serializers.ChoiceField(choices=PROPERTY_TYPES.choices())
    average_rating = serializers.SerializerMethodField()


    class Meta:
        model = Listing
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é
        # exclude = ['owner', 'views_count', 'created_at', 'updated_at']
        fields = '__all__'
        read_only_fields = ['owner', 'views_count', 'created_at', 'updated_at']

    def get_average_rating(self, obj):
        return round(obj.average_rating(), 1)



    # üéØ –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Listing
    def create(self, validated_data):
        # –û—Ç–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        location_data = validated_data.pop('location', None)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        user = self.context['request'].user

        if not location_data:
            raise serializers.ValidationError({'location': '–ü–æ–ª–µ "location" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.'})

        with transaction.atomic():
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Location (—Å–≤—è–∑—å –æ–¥–∏–Ω-–∫-–æ–¥–Ω–æ–º—É –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á)
            location = Location.objects.create(**location_data)
            validated_data.pop('owner', None)  # üí° –£–¥–∞–ª—è–µ–º owner, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞ 500
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –ª–æ–∫–∞—Ü–∏–µ–π –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            listing = Listing.objects.create(location=location, owner=user, **validated_data)

            # üîÅ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –≥—Ä—É–ø–ø–µ Tenant ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ Landlord
            if user.groups.filter(name='Tenant').exists():
                tenant_group = Group.objects.get(name='Tenant')
                landlord_group = Group.objects.get(name='Landlord')
                user.groups.remove(tenant_group)
                user.groups.add(landlord_group)

        return listing

    # üîÑ –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Listing –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
    def update(self, instance, validated_data):
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
        location_data = validated_data.pop('location', None)
        if not isinstance(location_data, dict):
            raise serializers.ValidationError({'location': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å.'})

        if location_data:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –ø–æ–ª—è
            location_instance = instance.location
            for attr, value in location_data.items():
                setattr(location_instance, attr, value)
            location_instance.save()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Listing
        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        instance.save()
        return instance



"""
 üìå LocationSerializer: –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ ListingSerializer.
    üî® create(): —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≥—Ä—É–ø–ø—ã.
    üîÅ update(): –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–∫ –ø–æ–ª—è —Å–∞–º–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å Location.
"""