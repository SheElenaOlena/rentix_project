from rest_framework import generics, viewsets
from rest_framework.permissions import AllowAny, IsAuthenticated
from apps.users.models import User
from .serializers import RegisterUserSerializer, UserSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from .permissions import IsAdmin, IsLandlordOwnerOrReadOnly
from ..listings.models import Listing
from ..listings.serializers import ListingSerializer


class RegisterUserView(generics.CreateAPIView):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ email –∏ –ø–∞—Ä–æ–ª—è.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ä–æ–ª—å TENANT (–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä).
    –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (AllowAny).
    """
    queryset = User.objects.all()                      # üîç –í—Å–µ –æ–±—ä–µ–∫—Ç—ã User –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    serializer_class = RegisterUserSerializer          # üß© –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    permission_classes = (AllowAny,)                   # üîì –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–∞–∂–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


"""–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≥—Ä—É–ø–ø—ã"""

class ProfileView(APIView):
    def get(self, request):
        user = request.user
        return Response({
            "id": user.id,
            "email": user.email,
            "role": user.role,
            "groups": [group.name for group in user.groups.all()],
            "date_joined": user.date_joined,
            "is_active": user.is_active
        })


"""–ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–≥ –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated, IsAdmin]


class ListingViewSet(viewsets.ModelViewSet):
    queryset = Listing.objects.all()
    serializer_class = ListingSerializer
    permission_classes = [IsAuthenticated, IsLandlordOwnerOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)