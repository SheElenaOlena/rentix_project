from django.db import models
from rest_framework.exceptions import ValidationError
from django.contrib import admin
from apps.users.models import User
from apps.listings.models import Listing
from apps.listings.choices.booking_statuses import BookingStatus



class Booking(models.Model):
    tenant = models.ForeignKey(
        User, on_delete=models.CASCADE,
        related_name='bookings'
    )
    listing = models.ForeignKey(
        Listing, on_delete=models.CASCADE,
        related_name='bookings'
    )
    check_in = models.DateField()
    check_out = models.DateField()

    status = models.CharField(
        max_length=20,
        choices=BookingStatus.choices(),
        default=BookingStatus.PENDING,
    )
    is_confirmed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        verbose_name_plural = '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'

    def __str__(self):
        return f"{self.tenant.email} ‚Üí {self.listing.title} [{self.check_in}‚Äì{self.check_out}]"

    def clean(self):
        if self.check_out <= self.check_in:
            raise ValidationError('–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.')

        if not self.listing.is_active:
            raise ValidationError('–û–±—ä–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')

        overlapping = Booking.objects.filter(
            listing=self.listing,
            status=BookingStatus.CONFIRMED,
            check_in__lt=self.check_out,
            check_out__gt=self.check_in
        ).exclude(pk=self.pk)

        if overlapping.exists():
            raise ValidationError('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.')

        def save(self, *args, **kwargs):
            self.full_clean()
            super().save(*args, **kwargs)

            # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            def confirm(self) -> None:
                if self.status != BookingStatus.PENDING:  #—Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî PENDING
                    raise ValidationError('–¢–æ–ª—å–∫–æ PENDING –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.')

                self.status = BookingStatus.CONFIRMED   #–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ CONFIRMED
                self.is_confirmed = True
                self.save()                             #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ

            # ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            def reject(self):
                if self.status != BookingStatus.PENDING:
                    raise ValidationError('–¢–æ–ª—å–∫–æ PENDING –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.')

                self.status = BookingStatus.REJECTED
                self.is_confirmed = False
                self.save()

            # üîÑ –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º
            def cancel(self):
                if self.status != BookingStatus.CONFIRMED:
                    raise ValidationError('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.')

                self.status = BookingStatus.CANCELLED
                self.save()

