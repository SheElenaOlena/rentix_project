from django.db import models
from .choices.property_types import PROPERTY_TYPES
from apps.users.models import User
from django.contrib import admin
from django.db.models import Avg





class Location(models.Model):
    """–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞"""
    city = models.CharField(
        max_length=100,
        verbose_name='–ì–æ—Ä–æ–¥',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Ä–ª–∏–Ω)'
    )
    street = models.CharField(
        max_length=100,
        verbose_name='–£–ª–∏—Ü–∞',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Friedrichstra√üe)'
    )
    house_number = models.CharField(
        max_length=20,
        verbose_name='–ù–æ–º–µ—Ä –¥–æ–º–∞',
        help_text='–ù–æ–º–µ—Ä –∑–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12A)'
    )
    postal_code = models.CharField(
        max_length=20,
        blank=True,
        verbose_name='–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å'
    )
    country = models.CharField(
        max_length=100,
        default='Germany',
        verbose_name='–°—Ç—Ä–∞–Ω–∞'
    )

    class Meta:
        """–ó–∞–¥–∞–ª–∏ UniqueConstraint, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è"""
        constraints = [
            models.UniqueConstraint(
                fields=['city', 'street', 'house_number'],
                name='unique_location_address'
            )
        ]
        verbose_name = '–õ–æ–∫–∞—Ü–∏—è'
        verbose_name_plural = '–õ–æ–∫–∞—Ü–∏–∏'

    def __str__(self):
        return f"{self.city}, {self.street} {self.house_number}"


class Listing(models.Model):
    title = models.CharField(
        max_length=255,
        verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    )
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ'
    )
    location = models.ForeignKey(
        Location,
        on_delete=models.CASCADE,
        verbose_name='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    )
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name='–¶–µ–Ω–∞'
    )
    rooms = models.PositiveIntegerField(
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç'
    )
    property_type = models.CharField(
        max_length=20,
        choices=PROPERTY_TYPES.choices(),
        default=PROPERTY_TYPES.apartment.name,
        verbose_name='–¢–∏–ø –∂–∏–ª—å—è'
    )
    views_count = models.PositiveIntegerField(default=0)

    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–æ'
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–°–æ–∑–¥–∞–Ω–æ'
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ'
    )
    # üëá –°–í–Ø–ó–¨: –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—Å—Ç–∏–ª –æ–±—ä–µ–∫—Ç
    owner = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='listings'
    )

    def average_rating(self):
        return self.reviews.filter(is_published=True).aggregate(avg=Avg('rating'))['avg'] or 0

    def is_available(self, start_date, end_date):
        """–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞, –Ω–∞ –≤—ã–±—Ä–∞–Ω—ã–µ –¥–∞—Ç—ã,
          –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
        """
        if not self.is_active:
            return False

        return not self.bookings.filter(
            status='confirmed',
            start_date__lt=end_date,
            end_date__gt=start_date
        ).exists()

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['title', 'location'],
                name='unique_listing_title_location'
            )
        ]
        verbose_name = '–û–±—ä—è–≤–ª–µ–Ω–∏–µ'
        verbose_name_plural = '–û–±—ä—è–≤–ª–µ–Ω–∏—è'

    def __str__(self):
        return self.title
