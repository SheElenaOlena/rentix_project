from django.utils import timezone
from rest_framework.generics import RetrieveAPIView
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import generics, request
from rest_framework.exceptions import PermissionDenied, ValidationError
from rest_framework.permissions import IsAuthenticated
from rest_framework import status
from django.shortcuts import get_object_or_404
from .models import Booking
from .serializers import (BookingSerializer,
                         BookingCancelSerializer,
                         BookingActionSerializer)



class BookingCreateView(APIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    permission_classes = [IsAuthenticated]

    def get_serializer(self, *args, **kwargs):
        return BookingSerializer(*args, **kwargs)

    def post(self, request):
        # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(request.user, 'role') and request.user.role == 'landlord':
            return Response(
                {'detail': '–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∂–∏–ª—å—ë.'},
                status=status.HTTP_403_FORBIDDEN
            )


        # data = request.data.copy()
        # data['tenant'] = request.user.id  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(tenant=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class BookingCancelView(APIView):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    permission_classes = [IsAuthenticated]

    def post(self, request, pk):
        print(f"Request user ID: {request.user.id}")

        booking = get_object_or_404(Booking, pk=pk, tenant=request.user)
        # booking = get_object_or_404(Booking, pk=pk)
        print(f"Booking status: {booking.status}")

        serializer = BookingCancelSerializer(instance=booking)
        serializer.save()
        return Response({'detail': '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'}, status=status.HTTP_200_OK)


class BookingActionView(APIView):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º.
    """
    def post(self, request, pk):
        booking = get_object_or_404(Booking, pk=pk)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if booking.listing.owner != request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")

        serializer = BookingActionSerializer(instance=booking, data=request.data)
        serializer.is_valid(raise_exception=True)


        try:
            serializer.save()
        except ValidationError as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

        return Response({
            'detail': f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ {serializer.validated_data["action"]}.',
            'id': booking.id,
            'new_status': booking.status
        }, status=status.HTTP_200_OK)


class FilteredBookingsView(generics.ListAPIView):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        status_param = self.request.query_params.get('status')
        queryset = Booking.objects.filter(tenant=self.request.user)

        if status_param == 'active':
            queryset = queryset.filter(check_out__gte=timezone.now().date())
        elif status_param == 'past':
            queryset = queryset.filter(check_out__lt=timezone.now().date())
        elif status_param:
            queryset = queryset.filter(status=status_param)

        return queryset

class BookingDetailView(RetrieveAPIView):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]